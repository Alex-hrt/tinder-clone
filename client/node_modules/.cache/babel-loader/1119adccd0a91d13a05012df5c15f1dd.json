{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\School\\\\WebTech\\\\Fullstack\\\\tinder-clone\\\\src\\\\pages\\\\Dashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport TinderCard from 'react-tinder-card';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst db = [{\n  name: 'Richard Hendricks',\n  url: './img/richard.jpg'\n}, {\n  name: 'Erlich Bachman',\n  url: './img/erlich.jpg'\n}, {\n  name: 'Monica Hall',\n  url: './img/monica.jpg'\n}, {\n  name: 'Jared Dunn',\n  url: './img/jared.jpg'\n}, {\n  name: 'Dinesh Chugtai',\n  url: './img/dinesh.jpg'\n}];\n\nconst Dashboard = () => {\n  _s();\n\n  const [currentIndex, setCurrentIndex] = useState(db.length - 1);\n  const [lastDirection, setLastDirection] = useState(); // used for outOfFrame closure\n\n  const currentIndexRef = useRef(currentIndex);\n  const childRefs = useMemo(() => Array(db.length).fill(0).map(i => React.createRef()), []);\n\n  const updateCurrentIndex = val => {\n    setCurrentIndex(val);\n    currentIndexRef.current = val;\n  };\n\n  const canGoBack = currentIndex < db.length - 1;\n  const canSwipe = currentIndex >= 0; // set last direction and decrease current index\n\n  const swiped = (direction, nameToDelete, index) => {\n    setLastDirection(direction);\n    updateCurrentIndex(index - 1);\n  };\n\n  const outOfFrame = (name, idx) => {\n    console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current); // handle the case in which go back is pressed before card goes outOfFrame\n\n    currentIndexRef.current >= idx && childRefs[idx].current.restoreCard(); // TODO: when quickly swipe and restore multiple times the same card,\n    // it happens multiple outOfFrame events are queued and the card disappear\n    // during latest swipes. Only the last outOfFrame event should be considered valid\n  };\n\n  const swipe = async dir => {\n    if (canSwipe && currentIndex < db.length) {\n      await childRefs[currentIndex].current.swipe(dir); // Swipe the card!\n    }\n  }; // increase current index and show card\n\n\n  const goBack = async () => {\n    if (!canGoBack) return;\n    const newIndex = currentIndex + 1;\n    updateCurrentIndex(newIndex);\n    await childRefs[newIndex].current.restoreCard();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"swiper-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-container\",\n        children: db.map((character, index) => /*#__PURE__*/_jsxDEV(TinderCard, {\n          ref: childRefs[index],\n          className: \"swipe\",\n          onSwipe: dir => swiped(dir, character.name, index),\n          onCardLeftScreen: () => outOfFrame(character.name, index),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundImage: 'url(' + character.url + ')'\n            },\n            className: \"card\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: character.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)\n        }, character.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dashboard, \"lG8L5g7jEuSLqK6/vw5VCscNgHo=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["D:/Work/School/WebTech/Fullstack/tinder-clone/src/pages/Dashboard.jsx"],"names":["TinderCard","useState","db","name","url","Dashboard","currentIndex","setCurrentIndex","length","lastDirection","setLastDirection","currentIndexRef","useRef","childRefs","useMemo","Array","fill","map","i","React","createRef","updateCurrentIndex","val","current","canGoBack","canSwipe","swiped","direction","nameToDelete","index","outOfFrame","idx","console","log","restoreCard","swipe","dir","goBack","newIndex","character","backgroundImage"],"mappings":"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","sourcesContent":["import TinderCard from 'react-tinder-card'\r\nimport { useState } from \"react\";\r\n\r\nconst db = [\r\n    {\r\n      name: 'Richard Hendricks',\r\n      url: './img/richard.jpg'\r\n    },\r\n    {\r\n      name: 'Erlich Bachman',\r\n      url: './img/erlich.jpg'\r\n    },\r\n    {\r\n      name: 'Monica Hall',\r\n      url: './img/monica.jpg'\r\n    },\r\n    {\r\n      name: 'Jared Dunn',\r\n      url: './img/jared.jpg'\r\n    },\r\n    {\r\n      name: 'Dinesh Chugtai',\r\n      url: './img/dinesh.jpg'\r\n    }\r\n  ]\r\n\r\nconst Dashboard = () => {\r\n    const [currentIndex, setCurrentIndex] = useState(db.length - 1)\r\n  const [lastDirection, setLastDirection] = useState()\r\n  // used for outOfFrame closure\r\n  const currentIndexRef = useRef(currentIndex)\r\n\r\n  const childRefs = useMemo(\r\n    () =>\r\n      Array(db.length)\r\n        .fill(0)\r\n        .map((i) => React.createRef()),\r\n    []\r\n  )\r\n\r\n  const updateCurrentIndex = (val) => {\r\n    setCurrentIndex(val)\r\n    currentIndexRef.current = val\r\n  }\r\n\r\n  const canGoBack = currentIndex < db.length - 1\r\n\r\n  const canSwipe = currentIndex >= 0\r\n\r\n  // set last direction and decrease current index\r\n  const swiped = (direction, nameToDelete, index) => {\r\n    setLastDirection(direction)\r\n    updateCurrentIndex(index - 1)\r\n  }\r\n\r\n  const outOfFrame = (name, idx) => {\r\n    console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current)\r\n    // handle the case in which go back is pressed before card goes outOfFrame\r\n    currentIndexRef.current >= idx && childRefs[idx].current.restoreCard()\r\n    // TODO: when quickly swipe and restore multiple times the same card,\r\n    // it happens multiple outOfFrame events are queued and the card disappear\r\n    // during latest swipes. Only the last outOfFrame event should be considered valid\r\n  }\r\n\r\n  const swipe = async (dir) => {\r\n    if (canSwipe && currentIndex < db.length) {\r\n      await childRefs[currentIndex].current.swipe(dir) // Swipe the card!\r\n    }\r\n  }\r\n\r\n  // increase current index and show card\r\n  const goBack = async () => {\r\n    if (!canGoBack) return\r\n    const newIndex = currentIndex + 1\r\n    updateCurrentIndex(newIndex)\r\n    await childRefs[newIndex].current.restoreCard()\r\n  }\r\n\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            {/* <ChatContainer /> */}\r\n            <div className=\"swiper-container\">\r\n                <div className=\"card-container\">\r\n                {db.map((character, index) => (\r\n          <TinderCard\r\n            ref={childRefs[index]}\r\n            className='swipe'\r\n            key={character.name}\r\n            onSwipe={(dir) => swiped(dir, character.name, index)}\r\n            onCardLeftScreen={() => outOfFrame(character.name, index)}\r\n          >\r\n            <div\r\n              style={{ backgroundImage: 'url(' + character.url + ')' }}\r\n              className='card'\r\n            >\r\n              <h3>{character.name}</h3>\r\n            </div>\r\n          </TinderCard>\r\n        ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Dashboard"]},"metadata":{},"sourceType":"module"}